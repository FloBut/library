openapi: 3.0.1
info:
  title: Library API
  description: API for managing authors and books in a library system
  version: "1.0.0"
servers:
  - url: http://localhost:8080
    description: Development server

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://localhost:7080/auth/realms/master/protocol/openid-connect/auth
          tokenUrl: https://localhost:7080/auth/realms/master/protocol/openid-connect/token
          scopes: {}
  schemas:
    AuthorRequestDTO:
      type: object
      properties:
        name:
          type: string
        bio:
          type: string
      required:
        - name
        - bio
    AuthorResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        bio:
          type: string
    BookRequestDTO:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        isbn:
          type: string
        authorId:
          type: integer
          format: int64
      required:
        - title
        - authorId
    BookResponseDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        description:
          type: string
        isbn:
          type: string
        authorId:
          type: integer
          format: int64

paths:
  /authors:
    get:
      operationId: getAllAuthors
      responses:
        '200':
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorResponseDTO'
      security:
        - OAuth2: [user]
    post:
      operationId: addAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '200':
          description: Author added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
      security:
        - OAuth2: [admin]
  /authors/{id}:
    get:
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Single author details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
      security:
        - OAuth2: [user]
    put:
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorRequestDTO'
      responses:
        '200':
          description: Updated author
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorResponseDTO'
      security:
        - OAuth2: [admin]
    delete:
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Author deleted
      security:
        - OAuth2: [admin]
  /books:
    get:
      operationId: getAllBooks
      summary: Retrieves a list of all books
      responses:
        '200':
          description: A list of books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponseDTO'
      security:
        - OAuth2: [ user ]
    post:
      operationId: addBook
      summary: Adds a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: Book added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
      security:
        - OAuth2: [ admin ]
  /books/{id}:
    get:
      operationId: getBookById
      summary: Retrieves a book by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detailed information of a book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
      security:
        - OAuth2: [ user ]
    put:
      operationId: updateBook
      summary: Updates an existing book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequestDTO'
      responses:
        '200':
          description: Book updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponseDTO'
      security:
        - OAuth2: [ admin ]
    delete:
      operationId: deleteBook
      summary: Deletes a book
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Book successfully deleted
security:
  - OAuth2: []

